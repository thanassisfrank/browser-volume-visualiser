# ugrid.py

# Binary UGRID file reader

# Reader for the NASA retro propulsion dataset mesh generated by FUN3D
# https://data.nas.nasa.gov/fun3d
# Data format is as specified in 
# https://www.simcenter.msstate.edu/software/documentation/ug_io/3d_grid_file_type_ugrid.html
# 1-based indexing

# [header]
# [node positions]
# [tri connectivity]
# [quad connectivity]
# [tet connectivity]
# [pent connectivity]
# [prism connectivity]
# [hex connectivity]

import numpy as np

class File ():
    # num int32s in header
    __LEN_HEADER = 7

    __file = None
    __file_ints = None
    __file_floats = None

    __sec_lengths = {}
    __offsets = {}

    def __init__(self, path):

        self.__file = open(path, "rb")

        file_buffer = self.__file.read()
        self.__file_ints = np.frombuffer(file_buffer, dtype=np.uint32)
        self.__file_floats = np.frombuffer(file_buffer, dtype=np.float32)

        self.__extract_header()

        self.__calc_offsets()

    def __extract_header(self): 
        self.__sec_lengths = {
            "node"   : self.__file_ints[0] * 3,
            "tri"    : self.__file_ints[1] * 3,
            "quad"   : self.__file_ints[2] * 4,
            "surf_id": self.__file_ints[1] + self.__file_ints[2], # num tri + num quad
            "tet"    : self.__file_ints[3] * 4,
            "pent"   : self.__file_ints[4] * 5,
            "prism"  : self.__file_ints[5] * 6,
            "hex"    : self.__file_ints[6] * 8
        }
    
    def __calc_offsets(self):
        curr_ptr = 0
        def next_ptr(length):
            nonlocal curr_ptr
            curr_ptr += length
            return curr_ptr

        self.__offsets = {
            "node"   : next_ptr(self.__LEN_HEADER),
            "tri"    : next_ptr(self.__sec_lengths["node"]),
            "quad"   : next_ptr(self.__sec_lengths["tri"]),
            "surf_id": next_ptr(self.__sec_lengths["quad"]),
            "tet"    : next_ptr(self.__sec_lengths["surf_id"]),
            "pent"   : next_ptr(self.__sec_lengths["tet"]),
            "prism"  : next_ptr(self.__sec_lengths["pent"]),
            "hex"    : next_ptr(self.__sec_lengths["prism"])
        }

    def __get_section(self, arr, name):
        return arr[self.__offsets[name] : self.__offsets[name] + self.__sec_lengths[name]]

    def get_counts(self):
        return self.__header    
    
    # retrieve data arrays from the file ===============================================
    
    def get_positions(self):
        return np.reshape(self.__get_section(self.__file_floats, "node"), (-1, 3))
    
    def get_tri_con(self):
        return self.__get_section(self.__file_ints, "tri")

    def get_quad_con(self):
        return self.__get_section(self.__file_ints, "quad")

    def get_tet_con(self):
        return self.__get_section(self.__file_ints, "tet")

    def get_pent_con(self):
        return self.__get_section(self.__file_ints, "pent")

    def get_prism_con(self):
        return self.__get_section(self.__file_ints, "prism")

    def get_hex_con(self):
        return self.__get_section(self.__file_ints, "hex")



    def close(self):
        self.__file.close()
