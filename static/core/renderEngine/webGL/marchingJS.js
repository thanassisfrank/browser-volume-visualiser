// marching.js
// implements the marching cubes algorithm

import {VecMath} from "../VecMath.js";
import {vec3} from "https://cdn.skypack.dev/gl-matrix";
export {generateMesh};

// vertex and edge convention used:
//                 7-------6          x---6---x
//                /|      /|     11  7|      5|  10
// z(k)          4-+-----5 |        x-+-4---x |
// ^ y(j)        | 3-----+-2        | x---2-+-x 
// |/            |/      |/      8  |3      |1   9
// o-->x(i)      0-------1          x---0---x

// coordinates of vertexes in relation to 0
const vertCoordTable = [
    [0, 0, 0], // 0
    [1, 0, 0], // 1
    [1, 1, 0], // 2
    [0, 1, 0], // 3
    [0, 0, 1], // 4
    [1, 0, 1], // 5
    [1, 1, 1], // 6
    [0, 1, 1], // 7
]

// table of active edges for a specific vertex code
// in order
const edgeTable = [
    [],
    [0,3,8],
    [0,1,9],
    [1,3,8,9],
    [1,2,10],
    [0,1,2,3,8,10],
    [0,2,9,10],
    [2,3,8,9,10],
    [2,3,11],
    [0,2,8,11],
    [0,1,2,3,9,11],
    [1,2,8,9,11],
    [1,3,10,11],
    [0,1,8,10,11],
    [0,3,9,10,11],
    [8,9,10,11],
    [4,7,8],
    [0,3,4,7],
    [0,1,4,7,8,9],
    [1,3,4,7,9],
    [1,2,4,7,8,10],
    [0,1,2,3,4,7,10],
    [0,2,4,7,8,9,10],
    [2,3,4,7,9,10],
    [2,3,4,7,8,11],
    [0,2,4,7,11],
    [0,1,2,3,4,7,8,9,11],
    [1,2,4,7,9,11],
    [1,3,4,7,8,10,11],
    [0,1,4,7,10,11],
    [0,3,4,7,8,9,10,11],
    [4,7,9,10,11],
    [4,5,9],
    [0,3,4,5,8,9],
    [0,1,4,5],
    [1,3,4,5,8],
    [1,2,4,5,9,10],
    [0,1,2,3,4,5,8,9,10],
    [0,2,4,5,10],
    [2,3,4,5,8,10],
    [2,3,4,5,9,11],
    [0,2,4,5,8,9,11],
    [0,1,2,3,4,5,11],
    [1,2,4,5,8,11],
    [1,3,4,5,9,10,11],
    [0,1,4,5,8,9,10,11],
    [0,3,4,5,10,11],
    [4,5,8,10,11],
    [5,7,8,9],
    [0,3,5,7,9],
    [0,1,5,7,8],
    [1,3,5,7],
    [1,2,5,7,8,9,10],
    [0,1,2,3,5,7,9,10],
    [0,2,5,7,8,10],
    [2,3,5,7,10],
    [2,3,5,7,8,9,11],
    [0,2,5,7,9,11],
    [0,1,2,3,5,7,8,11],
    [1,2,5,7,11],
    [1,3,5,7,8,9,10,11],
    [0,1,5,7,9,10,11],
    [0,3,5,7,8,10,11],
    [5,7,10,11],
    [5,6,10],
    [0,3,5,6,8,10],
    [0,1,5,6,9,10],
    [1,3,5,6,8,9,10],
    [1,2,5,6],
    [0,1,2,3,5,6,8],
    [0,2,5,6,9],
    [2,3,5,6,8,9],
    [2,3,5,6,10,11],
    [0,2,5,6,8,10,11],
    [0,1,2,3,5,6,9,10,11],
    [1,2,5,6,8,9,10,11],
    [1,3,5,6,11],
    [0,1,5,6,8,11],
    [0,3,5,6,9,11],
    [5,6,8,9,11],
    [4,5,6,7,8,10],
    [0,3,4,5,6,7,10],
    [0,1,4,5,6,7,8,9,10],
    [1,3,4,5,6,7,9,10],
    [1,2,4,5,6,7,8],
    [0,1,2,3,4,5,6,7],
    [0,2,4,5,6,7,8,9],
    [2,3,4,5,6,7,9],
    [2,3,4,5,6,7,8,10,11],
    [0,2,4,5,6,7,10,11],
    [0,1,2,3,4,5,6,7,8,9,10,11],
    [1,2,4,5,6,7,9,10,11],
    [1,3,4,5,6,7,8,11],
    [0,1,4,5,6,7,11],
    [0,3,4,5,6,7,8,9,11],
    [4,5,6,7,9,11],
    [4,6,9,10],
    [0,3,4,6,8,9,10],
    [0,1,4,6,10],
    [1,3,4,6,8,10],
    [1,2,4,6,9],
    [0,1,2,3,4,6,8,9],
    [0,2,4,6],
    [2,3,4,6,8],
    [2,3,4,6,9,10,11],
    [0,2,4,6,8,9,10,11],
    [0,1,2,3,4,6,10,11],
    [1,2,4,6,8,10,11],
    [1,3,4,6,9,11],
    [0,1,4,6,8,9,11],
    [0,3,4,6,11],
    [4,6,8,11],
    [6,7,8,9,10],
    [0,3,6,7,9,10],
    [0,1,6,7,8,10],
    [1,3,6,7,10],
    [1,2,6,7,8,9],
    [0,1,2,3,6,7,9],
    [0,2,6,7,8],
    [2,3,6,7],
    [2,3,6,7,8,9,10,11],
    [0,2,6,7,9,10,11],
    [0,1,2,3,6,7,8,10,11],
    [1,2,6,7,10,11],
    [1,3,6,7,8,9,11],
    [0,1,6,7,9,11],
    [0,3,6,7,8,11],
    [6,7,11],
    [6,7,11],
    [0,3,6,7,8,11],
    [0,1,6,7,9,11],
    [1,3,6,7,8,9,11],
    [1,2,6,7,10,11],
    [0,1,2,3,6,7,8,10,11],
    [0,2,6,7,9,10,11],
    [2,3,6,7,8,9,10,11],
    [2,3,6,7],
    [0,2,6,7,8],
    [0,1,2,3,6,7,9],
    [1,2,6,7,8,9],
    [1,3,6,7,10],
    [0,1,6,7,8,10],
    [0,3,6,7,9,10],
    [6,7,8,9,10],
    [4,6,8,11],
    [0,3,4,6,11],
    [0,1,4,6,8,9,11],
    [1,3,4,6,9,11],
    [1,2,4,6,8,10,11],
    [0,1,2,3,4,6,10,11],
    [0,2,4,6,8,9,10,11],
    [2,3,4,6,9,10,11],
    [2,3,4,6,8],
    [0,2,4,6],
    [0,1,2,3,4,6,8,9],
    [1,2,4,6,9],
    [1,3,4,6,8,10],
    [0,1,4,6,10],
    [0,3,4,6,8,9,10],
    [4,6,9,10],
    [4,5,6,7,9,11],
    [0,3,4,5,6,7,8,9,11],
    [0,1,4,5,6,7,11],
    [1,3,4,5,6,7,8,11],
    [1,2,4,5,6,7,9,10,11],
    [0,1,2,3,4,5,6,7,8,9,10,11],
    [0,2,4,5,6,7,10,11],
    [2,3,4,5,6,7,8,10,11],
    [2,3,4,5,6,7,9],
    [0,2,4,5,6,7,8,9],
    [0,1,2,3,4,5,6,7],
    [1,2,4,5,6,7,8],
    [1,3,4,5,6,7,9,10],
    [0,1,4,5,6,7,8,9,10],
    [0,3,4,5,6,7,10],
    [4,5,6,7,8,10],
    [5,6,8,9,11],
    [0,3,5,6,9,11],
    [0,1,5,6,8,11],
    [1,3,5,6,11],
    [1,2,5,6,8,9,10,11],
    [0,1,2,3,5,6,9,10,11],
    [0,2,5,6,8,10,11],
    [2,3,5,6,10,11],
    [2,3,5,6,8,9],
    [0,2,5,6,9],
    [0,1,2,3,5,6,8],
    [1,2,5,6],
    [1,3,5,6,8,9,10],
    [0,1,5,6,9,10],
    [0,3,5,6,8,10],
    [5,6,10],
    [5,7,10,11],
    [0,3,5,7,8,10,11],
    [0,1,5,7,9,10,11],
    [1,3,5,7,8,9,10,11],
    [1,2,5,7,11],
    [0,1,2,3,5,7,8,11],
    [0,2,5,7,9,11],
    [2,3,5,7,8,9,11],
    [2,3,5,7,10],
    [0,2,5,7,8,10],
    [0,1,2,3,5,7,9,10],
    [1,2,5,7,8,9,10],
    [1,3,5,7],
    [0,1,5,7,8],
    [0,3,5,7,9],
    [5,7,8,9],
    [4,5,8,10,11],
    [0,3,4,5,10,11],
    [0,1,4,5,8,9,10,11],
    [1,3,4,5,9,10,11],
    [1,2,4,5,8,11],
    [0,1,2,3,4,5,11],
    [0,2,4,5,8,9,11],
    [2,3,4,5,9,11],
    [2,3,4,5,8,10],
    [0,2,4,5,10],
    [0,1,2,3,4,5,8,9,10],
    [1,2,4,5,9,10],
    [1,3,4,5,8],
    [0,1,4,5],
    [0,3,4,5,8,9],
    [4,5,9],
    [4,7,9,10,11],
    [0,3,4,7,8,9,10,11],
    [0,1,4,7,10,11],
    [1,3,4,7,8,10,11],
    [1,2,4,7,9,11],
    [0,1,2,3,4,7,8,9,11],
    [0,2,4,7,11],
    [2,3,4,7,8,11],
    [2,3,4,7,9,10],
    [0,2,4,7,8,9,10],
    [0,1,2,3,4,7,10],
    [1,2,4,7,8,10],
    [1,3,4,7,9],
    [0,1,4,7,8,9],
    [0,3,4,7],
    [4,7,8],
    [8,9,10,11],
    [0,3,9,10,11],
    [0,1,8,10,11],
    [1,3,10,11],
    [1,2,8,9,11],
    [0,1,2,3,9,11],
    [0,2,8,11],
    [2,3,11],
    [2,3,8,9,10],
    [0,2,9,10],
    [0,1,2,3,8,10],
    [1,2,10],
    [1,3,8,9],
    [0,1,9],
    [0,3,8],
    []
] 

// converts from an edge number to the numbers of the vertices it connects
const edgeToVertsTable = [
    [0, 1], // 0
    [1, 2], // 1
    [2, 3], // 2
    [0, 3], // 3
    [4, 5], // 4
    [5, 6], // 5
    [6, 7], // 6
    [4, 7], // 7
    [0, 4], // 8
    [1, 5], // 9
    [2, 6], // 10
    [3, 7], // 11
    
]

// triangulation table created from: https://github.com/KineticTactic/marching-cubes-js
const triTable = [
    [],
    [0,2,1],
    [0,1,2],
    [0,2,1,3,2,0],
    [0,1,2],
    [0,4,3,1,2,5],
    [2,1,3,0,1,2],
    [0,2,1,0,4,2,4,3,2],
    [1,2,0],
    [0,3,1,2,3,0],
    [1,4,0,2,3,5],
    [0,4,1,0,3,4,3,2,4],
    [1,2,0,3,2,1],
    [0,3,1,0,2,3,2,4,3],
    [1,2,0,1,4,2,4,3,2],
    [1,0,2,2,0,3],
    [0,1,2],
    [2,1,0,3,1,2],
    [0,1,5,4,2,3],
    [2,0,4,2,3,0,3,1,0],
    [0,1,5,4,2,3],
    [3,4,5,3,0,4,1,2,6],
    [5,1,6,5,0,1,4,2,3],
    [0,5,4,0,4,3,0,3,1,3,4,2],
    [4,2,3,1,5,0],
    [4,2,3,4,1,2,1,0,2],
    [7,0,1,6,4,5,2,3,8],
    [2,3,5,4,2,5,4,5,1,4,1,0],
    [1,5,0,1,6,5,3,4,2],
    [1,5,4,1,2,5,1,0,2,3,5,2],
    [2,3,4,5,0,7,5,7,6,7,0,1],
    [0,1,4,0,4,2,2,4,3],
    [2,1,0],
    [5,3,2,0,4,1],
    [0,3,2,1,3,0],
    [4,3,2,4,1,3,1,0,3],
    [0,1,5,4,3,2],
    [3,0,6,1,2,8,4,7,5],
    [3,1,4,3,2,1,2,0,1],
    [0,5,3,1,0,3,1,3,2,1,2,4],
    [4,3,2,0,1,5],
    [0,6,1,0,4,6,2,5,3],
    [0,5,4,0,1,5,2,3,6],
    [1,0,3,1,3,4,1,4,5,2,4,3],
    [5,1,6,5,0,1,4,3,2],
    [2,5,3,0,4,1,4,6,1,4,7,6],
    [3,2,0,3,0,5,3,5,4,5,0,1],
    [1,0,2,1,2,3,3,2,4],
    [3,1,2,0,1,3],
    [4,1,0,4,2,1,2,3,1],
    [0,3,4,0,1,3,1,2,3],
    [0,2,1,1,2,3],
    [5,3,4,5,2,3,6,0,1],
    [7,1,2,6,4,0,4,3,0,4,5,3],
    [4,0,1,4,1,2,4,2,3,5,2,1],
    [0,4,2,0,2,1,1,2,3],
    [3,5,2,3,4,5,1,6,0],
    [4,2,3,4,3,1,4,1,0,1,3,5],
    [2,3,7,0,1,6,1,5,6,1,4,5],
    [4,1,0,4,0,3,3,0,2],
    [5,2,4,4,2,3,6,0,1,6,1,7],
    [2,3,0,2,0,4,3,6,0,1,0,5,6,5,0],
    [6,5,0,6,0,1,5,2,0,4,0,3,2,3,0],
    [3,2,0,1,3,0],
    [2,1,0],
    [0,4,1,2,5,3],
    [4,0,1,2,5,3],
    [0,4,1,0,5,4,2,6,3],
    [0,3,2,1,3,0],
    [1,5,4,1,2,5,3,0,6],
    [4,3,2,4,0,3,0,1,3],
    [2,5,4,2,4,0,2,0,3,1,0,4],
    [0,1,5,4,3,2],
    [6,0,4,6,1,0,5,3,2],
    [0,1,6,2,3,8,4,7,5],
    [2,6,3,0,5,1,5,7,1,5,4,7],
    [3,1,4,3,2,1,2,0,1],
    [0,4,5,0,5,2,0,2,1,2,5,3],
    [1,5,3,0,1,3,0,3,2,0,2,4],
    [1,0,3,1,3,4,4,3,2],
    [1,5,2,0,3,4],
    [2,1,0,2,5,1,4,3,6],
    [1,7,0,3,8,4,6,2,5],
    [7,4,3,0,6,5,0,5,1,5,6,2],
    [4,0,1,4,3,0,2,5,6],
    [1,2,5,5,2,6,3,0,4,3,4,7],
    [6,2,5,7,0,3,0,4,3,0,1,4],
    [5,1,6,5,6,2,1,0,6,3,6,4,0,4,6],
    [1,8,0,5,6,2,7,4,3],
    [3,6,4,2,5,1,2,1,0,1,5,7],
    [0,1,9,4,7,8,2,3,11,5,10,6],
    [6,1,0,6,8,1,6,2,8,5,8,2,3,7,4],
    [6,2,5,1,7,3,1,3,0,3,7,4],
    [3,1,6,3,6,4,1,0,6,5,6,2,0,2,6],
    [0,3,7,0,4,3,0,1,4,8,4,1,6,2,5],
    [2,1,4,2,4,5,0,3,4,3,5,4],
    [3,0,2,1,0,3],
    [2,6,3,2,5,6,0,4,1],
    [4,0,1,4,3,0,3,2,0],
    [4,1,0,4,0,3,4,3,2,3,0,5],
    [0,2,4,0,1,2,1,3,2],
    [3,0,6,1,2,7,2,4,7,2,5,4],
    [0,1,2,2,1,3],
    [4,1,0,4,0,2,2,0,3],
    [5,2,4,5,3,2,6,0,1],
    [0,4,1,1,4,7,2,5,6,2,6,3],
    [3,7,2,0,1,5,0,5,4,5,1,6],
    [3,2,0,3,0,5,2,4,0,1,0,6,4,6,0],
    [4,3,2,4,1,3,4,0,1,5,3,1],
    [4,6,1,4,1,0,6,3,1,5,1,2,3,2,1],
    [1,4,3,1,3,0,0,3,2],
    [1,0,2,3,1,2],
    [1,4,0,1,2,4,2,3,4],
    [0,3,1,0,5,3,0,4,5,2,3,5],
    [5,2,3,1,5,3,1,3,4,1,4,0],
    [4,2,3,4,3,0,0,3,1],
    [0,1,2,0,2,4,0,4,5,4,2,3],
    [2,4,6,2,6,1,4,5,6,0,6,3,5,3,6],
    [3,4,0,3,0,2,2,0,1],
    [3,1,0,2,3,0],
    [0,1,7,6,2,4,6,4,5,4,2,3],
    [1,0,3,1,3,6,0,4,3,2,3,5,4,5,3],
    [1,6,0,1,5,6,1,7,5,4,5,7,2,3,8],
    [5,1,0,5,0,3,4,2,0,2,3,0],
    [4,5,2,4,2,3,5,0,2,6,2,1,0,1,2],
    [0,4,1,5,2,3],
    [3,4,0,3,0,2,1,5,0,5,2,0],
    [1,2,0],
    [1,0,2],
    [1,0,4,5,3,2],
    [0,1,4,5,3,2],
    [4,0,5,4,1,0,6,3,2],
    [4,0,1,2,5,3],
    [1,2,7,3,0,6,4,8,5],
    [1,4,0,1,5,4,2,6,3],
    [2,7,3,0,6,1,6,4,1,6,5,4],
    [3,0,1,2,0,3],
    [3,0,4,3,2,0,2,1,0],
    [2,5,4,2,3,5,0,1,6],
    [0,2,1,0,4,2,0,5,4,4,3,2],
    [4,3,2,4,0,3,0,1,3],
    [5,3,2,1,3,5,1,4,3,1,0,4],
    [0,1,3,0,3,5,0,5,4,2,5,3],
    [1,0,4,1,4,2,2,4,3],
    [1,2,0,3,2,1],
    [1,3,4,1,0,3,0,2,3],
    [4,3,6,4,2,3,5,0,1],
    [4,2,3,4,3,1,4,1,0,5,1,3],
    [3,4,2,3,6,4,1,5,0],
    [1,2,6,3,0,7,0,5,7,0,4,5],
    [2,7,4,2,3,7,0,1,5,1,6,5],
    [5,4,1,5,1,0,4,2,1,6,1,3,2,3,1],
    [4,0,1,4,2,0,2,3,0],
    [0,2,1,2,3,1],
    [1,7,0,2,3,4,2,4,5,4,3,6],
    [0,4,2,0,2,1,1,2,3],
    [4,0,1,4,3,0,4,2,3,3,5,0],
    [4,1,0,4,0,3,3,0,2],
    [2,3,1,2,1,4,3,6,1,0,1,5,6,5,1],
    [3,2,0,1,3,0],
    [0,4,1,3,2,5],
    [0,6,1,2,7,3,8,5,4],
    [3,0,1,3,2,0,5,4,6],
    [7,5,4,6,1,2,1,3,2,1,0,3],
    [6,3,2,7,0,1,5,4,8],
    [6,11,7,1,2,10,0,8,3,4,9,5],
    [5,4,7,3,2,6,2,1,6,2,0,1],
    [1,2,6,1,3,2,1,0,3,7,3,0,8,5,4],
    [5,0,1,5,4,0,3,2,6],
    [7,3,2,0,6,4,0,4,1,4,6,5],
    [3,6,2,3,7,6,1,5,0,5,4,0],
    [4,1,6,4,6,5,1,0,6,2,6,3,0,3,6],
    [6,3,2,7,0,4,0,5,4,0,1,5],
    [1,4,8,1,5,4,1,0,5,6,5,0,7,3,2],
    [2,0,6,2,6,3,0,1,6,4,6,5,1,5,6],
    [3,2,5,3,5,4,1,0,5,0,4,5],
    [1,3,0,1,4,3,4,2,3],
    [1,3,5,0,3,1,0,2,3,0,4,2],
    [0,5,4,0,2,5,0,1,2,2,3,5],
    [3,4,1,3,1,2,2,1,0],
    [0,1,6,5,2,7,5,7,4,7,2,3],
    [0,8,3,0,5,8,0,6,5,4,5,6,1,2,7],
    [6,4,2,6,2,3,4,0,2,5,2,1,0,1,2],
    [3,5,1,3,1,2,0,4,1,4,2,1],
    [2,4,5,2,0,4,2,3,0,1,4,0],
    [4,2,3,4,3,0,0,3,1],
    [1,4,6,1,6,0,4,5,6,3,6,2,5,2,6],
    [0,2,3,1,0,3],
    [0,1,3,0,3,6,1,4,3,2,3,5,4,5,3],
    [5,1,0,5,0,3,4,2,0,2,3,0],
    [0,1,4,2,3,5],
    [2,0,1],
    [3,0,2,1,0,3],
    [6,2,5,6,3,2,4,1,0],
    [2,6,3,2,5,6,1,4,0],
    [6,3,2,6,7,3,5,4,0,4,1,0],
    [4,0,1,4,3,0,3,2,0],
    [0,6,3,1,2,5,1,5,4,5,2,7],
    [4,3,2,4,1,3,4,0,1,1,5,3],
    [3,2,0,3,0,6,2,5,0,1,0,4,5,4,0],
    [0,2,4,0,1,2,1,3,2],
    [4,1,0,4,2,1,4,3,2,5,1,2],
    [6,0,1,4,7,3,4,3,5,3,7,2],
    [5,4,1,5,1,0,4,3,1,6,1,2,3,2,1],
    [0,1,2,1,3,2],
    [0,4,3,0,3,1,1,3,2],
    [4,0,1,4,1,2,2,1,3],
    [3,2,1,0,3,1],
    [1,2,0,1,3,2,3,4,2],
    [3,0,2,3,5,0,3,4,5,5,1,0],
    [0,1,5,4,2,6,4,6,7,6,2,3],
    [5,6,2,5,2,3,6,1,2,4,2,0,1,0,2],
    [1,3,0,1,4,3,1,5,4,2,3,4],
    [0,4,6,0,6,3,4,5,6,2,6,1,5,1,6],
    [0,1,3,0,3,5,1,6,3,2,3,4,6,4,3],
    [4,2,3,0,5,1],
    [0,3,5,1,3,0,1,2,3,1,4,2],
    [3,4,1,3,1,2,2,1,0],
    [3,8,2,3,5,8,3,6,5,4,5,6,0,1,7],
    [3,5,1,3,1,2,0,4,1,4,2,1],
    [4,2,3,4,3,1,1,3,0],
    [0,2,3,1,0,3],
    [4,2,3,4,3,1,5,0,3,0,1,3],
    [2,0,1],
    [0,4,1,0,2,4,2,3,4],
    [0,4,1,2,5,3,5,7,3,5,6,7],
    [1,4,5,1,5,2,1,2,0,3,2,5],
    [1,0,2,1,2,4,0,5,2,3,2,6,5,6,2],
    [2,5,3,4,5,2,4,1,5,4,0,1],
    [7,5,4,7,8,5,7,1,8,2,8,1,0,6,3],
    [4,3,2,4,2,1,1,2,0],
    [5,3,2,5,2,0,4,1,2,1,0,2],
    [0,4,5,0,3,4,0,1,3,3,2,4],
    [5,6,3,5,3,2,6,1,3,4,3,0,1,0,3],
    [3,5,6,3,6,2,5,4,6,1,6,0,4,0,6],
    [0,5,1,4,3,2],
    [2,4,0,2,0,3,3,0,1],
    [2,5,1,2,1,3,0,4,1,4,3,1],
    [2,0,1,3,2,1],
    [0,2,1],
    [1,2,0,2,3,0],
    [1,0,2,1,2,4,4,2,3],
    [0,1,3,0,3,2,2,3,4],
    [1,0,2,3,1,2],
    [0,1,4,0,4,3,3,4,2],
    [3,0,4,3,4,5,1,2,4,2,5,4],
    [0,1,3,2,0,3],
    [1,0,2],
    [0,1,2,0,2,4,4,2,3],
    [2,3,1,0,2,1],
    [2,3,4,2,4,5,0,1,4,1,5,4],
    [0,2,1],
    [0,1,2,3,0,2],
    [0,2,1],
    [0,1,2],
    []
]

// takes data object as a 3d array and returns list of vertices (1d float32) and indices (1d uint16) for the mesh
// at the supplied threshold value
var generateMesh = function(dataObj, meshObj, threshold) {
    //const start = Date.now();
    meshObj.clear();

    //loop through every cell
    let code = 0;
    let coord = new Array(3);
    let vertsLength = 0;

    let edges;
    let factors;
    let theseVerts;

    for (let i = 0; i < dataObj.size[0] - 1; i++) {
        for (let j = 0; j < dataObj.size[1] - 1; j++) {
            for (let k = 0; k < dataObj.size[2] - 1; k++) {
                //if (i != 7 || j != 3 || k != 10) continue;
                coord[0] = i;
                coord[1] = j;
                coord[2] = k;

                vertsLength = meshObj.verts.length/3;
                // values for cell data points are stored as 1d array
                // index = i + 2*j + 4*k (local coords)
                // generate code for the cell
                code = getCode(coord, dataObj, threshold);           
                if (code == 0 || code == 255) continue;
                // gets appropriate active edges
                edges = edgeTable[code];
                //calculate factors for each edge (distance from 1st connected vertex in index space)
                factors = edgesToFactors(edges, coord, dataObj, threshold);
                //turns edge list into coords
                theseVerts = edgesToCoords(meshObj.verts, edges, coord, dataObj.cellSize, factors);            
                //create entries for indicies list
                
                getIndices(meshObj.indices, code, vertsLength)
                            
                //calculate normal vector for each vertex
                getVertexNormals(meshObj.normals, edges, coord, dataObj, factors);
                //getVertexNormalsFlat(meshObj.normals, theseVerts, tri);
                //const theseNormals = emptyNormals(edges);
            }
        }
    }
    meshObj.indicesNum = meshObj.indices.length;
}

const getCode = (coord, dataObj, threshold) => {
    let code = 0;
    for (let l = 0; l < 8; l++) {
        const c = vertCoordTable[l];
        code |= (dataObj.index(coord[0] + c[0], coord[1] + c[1], coord[2] + c[2]) > threshold) << l;
    }
    return code;
}

const edgesToFactors = (edges, coord, dataObj, threshold) => {
    let factors = [];
    for (let i = 0; i < edges.length; i++) { 
        let verts = edgeToVertsTable[edges[i]]
        let a = vertCoordTable[verts[0]]; 
        let b = vertCoordTable[verts[1]];

        // get interpolation factor
        // get values at connected vertices
        const va = dataObj.index(coord[0] + a[0], coord[1] + a[1], coord[2] + a[2]);
        const vb = dataObj.index(coord[0] + b[0], coord[1] + b[1], coord[2] + b[2]);
        factors.push((threshold-va)/(vb-va));
    }
    return factors;
}

// interpolates between 2 coords
const interpolateCoord = (a, b, fac) => {
    let final = []
    for (let i = 0; i < a.length; i++) {
        final[i] = (a[i]*(1-fac) + b[i]*(fac))
    }
    return final;
}

// cellCoord is coord of 0 vertex in cell
// preserves order
const edgesToCoords = (verts, edges, cellCoord, cellDims, factors) => {
    // loop through each edge
    for (let i = 0; i < edges.length; i++) { 
        // get verts associated with it
        let connected = edgeToVertsTable[edges[i]]
        // get coords of that vert in index space
        // pass into interpolate coords
        // add to coords list
        // const coord = interpolateCoord(vertCoordTable[connected[0]], vertCoordTable[connected[1]], factors[i]);
        // verts.push(
        //     coord[0]*cellDims[0]+cellCoord[0],
        //     coord[1]*cellDims[1]+cellCoord[1],
        //     coord[2]*cellDims[2]+cellCoord[2],
        // )
        const a = vertCoordTable[connected[0]];
        const b = vertCoordTable[connected[1]];
        for (let j = 0; j < 3; j++) {
            verts.push((a[j]*(1-factors[i]) + b[j]*(factors[i]))*cellDims[j] + cellCoord[j]);
        }
        //coords.push(...VecMath.vecAdd(VecMath.vecMult(interpolateCoord(a, b, factors[i]), cellDims), cellCoord));
    }
}

const getIndices = (indices, code, vertsLength) => {
    const tri = triTable[code];
    for (let l = 0; l < tri.length; l++) {
        indices.push(tri[l] + vertsLength)
    }
}

const getVertexNormals = (normals, edges, coord, dataObj, factors) => {
    if (!dataObj.normalsPopulated) dataObj.generateNormals();
    // loop through each edge
    for (let i = 0; i < edges.length; i++) { 
        // get verts associated with it
        const verts = edgeToVertsTable[edges[i]]
        // get coords of that vert in index space
        const a = vertCoordTable[verts[0]]; 
        const b = vertCoordTable[verts[1]];
        // get normals at connected verts
        const na = dataObj.indexNormals(coord[0] + a[0], coord[1] + a[1], coord[2] + a[2]);
        const nb = dataObj.indexNormals(coord[0] + b[0], coord[1] + b[1], coord[2] + b[2]);
        // pass into interpolate coords and add to list
        normals.push(...interpolateCoord(na, nb, factors[i]));
    }
    return normals;
}

const getVertexNormalsFlat = (normals, verts, indices) => {
    const normLen = normals.length;
    let a = vec3.create();
    let b = vec3.create();
    for (let i = 0; i < indices.length; i += 3) {
        // index in verts of the start of each vertex
        const i0 = 3*indices[i];
        const i1 = 3*indices[i+1];
        const i2 = 3*indices[i+2];
        // coord of each vertex
        const v0 = [verts[i0], verts[i0 + 1], verts[i0 + 2]];
        const v1 = [verts[i1], verts[i1 + 1], verts[i1 + 2]];
        const v2 = [verts[i2], verts[i2 + 1], verts[i2 + 2]];

        // 2 sides of the tri
        vec3.sub(a, v1, v0);
        vec3.sub(b, v2, v0);

        let n = vec3.create();
        vec3.cross(n, a, b)

        if(n[0] != 0 && n[1] != 0 && n[2] != 0) {
        
            normals[i0 + normLen] = n[0];
            normals[i0+1  + normLen] = n[1];
            normals[i0+2  + normLen] = n[2];
            normals[i1  + normLen] = n[0];
            normals[i1+1  + normLen] = n[1];
            normals[i1+2  + normLen] = n[2];
            normals[i2  + normLen] = n[0];
            normals[i2+1  + normLen] = n[1];
            normals[i2+2  + normLen] = n[2];

        }
    }
    return normals;
}

function emptyNormals(edges) {
    
    for (let i = 0; i < edges.length; i++) {
    }
}

// for generating tables and checking values: -----------------------------------------------------------------------------------

// returns list of active edges for the specific vertex code
var edgesFromCode = (code) => {
    const v0 = (code & 1<<0) && true;
    const v1 = (code & 1<<1) && true;
    const v2 = (code & 1<<2) && true;
    const v3 = (code & 1<<3) && true;
    const v4 = (code & 1<<4) && true;
    const v5 = (code & 1<<5) && true;
    const v6 = (code & 1<<6) && true;
    const v7 = (code & 1<<7) && true;

    verts = [v0, v1, v2, v3, v4, v5, v6, v7];

    let edges = [];
    for (let i = 0; i < 12; i++) {
        let thisVerts = edgeToVertsTable[i]
        if (verts[thisVerts[0]] ^ verts[thisVerts[1]]) edges.push(i);
    }
    return edges;
}

var generateEdgeTable = () => {
    let table = []
    for (i = 0; i < 256; i++) {
        table[i] = edgesFromCode(i);
    }
    return table;
}

const generateRelTriTable = () => {
    let table = [];
    for (i = 0; i < 256; i++) {
        const edges = edgeTable[i];
        const tri = triangulationTable[i];
        // relative triangulation
        let theseIndices = [];
        for (let i = 0; i < tri.length; i++) {
            if (tri[i] == -1) break;
            theseIndices.push(edges.indexOf(tri[i]));
        }
        table[i] = theseIndices;
    }
    return table;
}

{
    // var data = [[[],[]],[[],[]]]
    // data[0][0][0] = Math.random();
    // data[0][0][1] = Math.random();
    // data[0][1][0] = Math.random();
    // data[0][1][1] = Math.random();
    // data[1][0][0] = Math.random();
    // data[1][0][1] = Math.random();
    // data[1][1][0] = Math.random();
    // data[1][1][1] = Math.random();

    // generateMesh(data, 0.5)
}

//console.log(JSON.stringify(generateEdgeTable()))
//console.log(JSON.stringify(generateRelTriTable()))

//console.log(interpolateCoord([0, 1, 0], [1, 1, 3], 0.5))